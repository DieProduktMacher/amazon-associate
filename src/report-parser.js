// Generated by CoffeeScript 1.6.3
var EventEmitter, sax,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

sax = require('sax');

module.exports = (function(_super) {
  __extends(_Class, _super);

  function _Class() {
    var _this = this;
    this.reports = [];
    this.report = {};
    this.mode = 'search-table-head-end';
    this.parser = sax.parser(false);
    this.parser.onerror = function(err) {
      return _this.emit('error', err);
    };
    this.parser.onend = function() {
      return _this.emit('end', _this.reports);
    };
    this.parser.onopentag = function(_arg) {
      var name;
      name = _arg.name;
      if (_this.mode === 'next-row' && name === 'TR') {
        return _this.mode = 'read-filename';
      }
    };
    this.parser.ontext = function(text) {
      switch (_this.mode) {
        case 'read-filename':
          _this.report.filename = text;
          return _this.mode = 'read-last-modified';
        case 'read-last-modified':
          _this.report.lastModified = text;
          return _this.mode = 'read-md5';
        case 'read-md5':
          _this.report.md5 = text;
          return _this.mode = 'read-size';
        case 'read-size':
          _this.report.size = text;
          return _this.mode = 'read-url';
      }
    };
    this.parser.onattribute = function(_arg) {
      var name, value;
      name = _arg.name, value = _arg.value;
      if (_this.mode === 'read-url' && name === 'HREF') {
        _this.report.url = value;
        _this.reports.push(_this.report);
        _this.report = {};
        return _this.mode = 'next-row';
      }
    };
    this.parser.onclosetag = function(name) {
      if (_this.mode === 'search-table-head-end' && name === 'TR') {
        return _this.mode = 'next-row';
      }
    };
  }

  _Class.prototype.write = function(data) {
    return this.parser.write(data);
  };

  _Class.prototype.close = function() {
    return this.parser.close();
  };

  return _Class;

})(EventEmitter);
